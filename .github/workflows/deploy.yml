name: Deploy Piazza Virtuale to VPS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 185.238.72.187
          port: 2222
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 300s
          script: |
            # Colors for output formatting 
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m' # No Color

            echo -e "${GREEN}🚀 Starting deployment of Piazza Virtuale...${NC}"

            # Step 1: Setup workspace and repository structure
            echo -e "${YELLOW}📦 Managing workspace and repository...${NC}"

            # Create the italian-site-1 workspace directory
            mkdir -p ~/italian-site-1
            cd ~/italian-site-1

            # Handle the application repository within workspace
            if [ ! -d piazza-virtuale/.git ]; then
              echo "Cloning repository for the first time into workspace..."
              rm -rf piazza-virtuale
              git clone https://github.com/dersaei/piazza-virtuale.git piazza-virtuale
            else
              echo "Updating existing repository in workspace..."
              cd piazza-virtuale
              git fetch origin
              git reset --hard origin/main
              cd .. # Return to workspace root
            fi

            # Step 2: Remove Docker-specific files that might interfere
            echo -e "${YELLOW}🧹 Cleaning Docker artifacts...${NC}"
            cd piazza-virtuale
            rm -f Dockerfile .dockerignore 2>/dev/null || true

            # Step 3: Install dependencies for native deployment
            echo -e "${YELLOW}📚 Installing dependencies...${NC}"
            # Remove any existing node_modules to ensure clean install
            rm -rf node_modules package-lock.json 2>/dev/null || true
            npm install

            # Step 4: Build the application in standalone mode
            echo -e "${YELLOW}🔨 Building application for standalone deployment...${NC}"
            npm run build

            # Verify the standalone build was successful
            if [ ! -f .next/standalone/server.js ]; then
              echo -e "${RED}❌ Standalone build failed - server.js not found${NC}"
              echo "Checking build output..."
              ls -la .next/ 2>/dev/null || echo "No .next directory found"
              exit 1
            fi

            # Step 5: Prepare standalone deployment structure
            echo -e "${YELLOW}📋 Preparing standalone deployment...${NC}"

            # Copy standalone server and dependencies to application root
            cp -r .next/standalone/* .

            # Copy static assets to the correct location for standalone mode
            if [ -d .next/static ]; then
              mkdir -p .next
              cp -r .next/static .next/static
            fi

            # Copy public assets if they exist
            if [ -d public ]; then
              cp -r public/* . 2>/dev/null || true
            fi

            # Step 6: PM2 Process Management
            echo -e "${YELLOW}⚙️  Managing PM2 process...${NC}"

            # Return to workspace root for PM2 operations
            cd ~/italian-site-1

            # Verify PM2 ecosystem configuration exists
            if [ ! -f ecosystem.config.js ]; then
              echo -e "${RED}❌ PM2 ecosystem.config.js not found in workspace${NC}"
              echo "Creating basic ecosystem configuration..."
              cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [
                {
                  name: 'piazza-virtuale',
                  script: './piazza-virtuale/server.js',
                  cwd: '/root/italian-site-1',
                  instances: 1,
                  exec_mode: 'cluster',
                  env: {
                    NODE_ENV: 'production',
                    PORT: 3000,
                    HOSTNAME: '0.0.0.0'
                  },
                  watch: false,
                  max_memory_restart: '1G',
                  restart_delay: 4000,
                  error_file: '/root/italian-site-1/logs/error.log',
                  out_file: '/root/italian-site-1/logs/out.log',
                  log_file: '/root/italian-site-1/logs/combined.log',
                  time: true
                }
              ]
            };
            EOF
              # Create logs directory
              mkdir -p logs
            fi

            # Manage PM2 process
            if pm2 describe piazza-virtuale > /dev/null 2>&1; then
              echo "Reloading existing PM2 process..."
              pm2 reload ecosystem.config.js --env production
            else
              echo "Starting new PM2 process..."
              pm2 start ecosystem.config.js --env production
            fi

            # Save PM2 configuration for system startup
            pm2 save
            pm2 startup systemd -u root --hp /root > /dev/null 2>&1 || true

            # Step 7: Health checks and verification
            echo -e "${YELLOW}🏥 Performing health checks...${NC}"
            sleep 8 # Give application time to fully start

            # Check PM2 process status
            if pm2 describe piazza-virtuale | grep -q "online"; then
              echo -e "${GREEN}✅ PM2 process is running${NC}"
              
              # Test application responsiveness
              if curl -f http://localhost:3000 > /dev/null 2>&1; then
                echo -e "${GREEN}✅ Application health check passed${NC}"
              else
                echo -e "${YELLOW}⚠️  Application started but not responding to HTTP requests${NC}"
                echo "Recent logs:"
                pm2 logs piazza-virtuale --lines 10 || true
              fi
            else
              echo -e "${RED}❌ PM2 process failed to start${NC}"
              echo "PM2 process details:"
              pm2 describe piazza-virtuale || true
              echo "Recent error logs:"
              pm2 logs piazza-virtuale --lines 20 || true
              exit 1
            fi

            # Step 8: Final status and cleanup
            echo -e "${YELLOW}🎯 Final deployment status...${NC}"

            # Clean up build artifacts to save space
            cd ~/italian-site-1/piazza-virtuale
            rm -rf .next/cache 2>/dev/null || true
            npm cache clean --force 2>/dev/null || true

            # Display deployment summary
            echo -e "${GREEN}📊 Deployment Summary:${NC}"
            echo "Workspace: ~/italian-site-1/"
            echo "Application: ~/italian-site-1/piazza-virtuale/"
            echo "PM2 Status: $(pm2 list | grep piazza-virtuale || echo 'Not found in PM2 list')"
            echo "Application URL: http://185.238.72.187:3000 (direct)"
            echo "Nginx URL: http://185.238.72.187 (proxied)"
            echo "Logs location: ~/italian-site-1/logs/"

            echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
            echo -e "${GREEN}🌐 Your application is ready for domain configuration${NC}"
